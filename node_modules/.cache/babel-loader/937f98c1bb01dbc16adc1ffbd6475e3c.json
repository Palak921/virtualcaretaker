{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\palak\\\\OneDrive\\\\Desktop\\\\FYProject\\\\virtualcaretaker\\\\src\\\\Login.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from './Input'; // import Button from '../../components/UI/Button/Button';\n\nimport { Button } from '@material-ui/core'; // import Spinner from '../../components/UI/Spinner/Spinner';\n\nimport './Auth.css';\nimport * as actions from '../store/index';\nimport Axios from 'axios';\nimport { updateObject, checkValidity } from '../store/utility';\nimport qs from 'qs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true,\n      submit: false,\n      error: false\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      // console.log(event.target.value)\n      // console.log(controlName)\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    // console.log(classes.Auth);\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this));\n\n    if (this.props.loading) {// form = <Spinner />\n    }\n\n    if (this.props.isAuthenticated) {// authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    const submitHandler = () => {\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    const signInHandler = event => {\n      event.preventDefault();\n      submitHandler();\n      Axios({\n        method: 'post',\n        url: 'https://radiant-chamber-59801.herokuapp.com/api/userdb/signin',\n        data: qs.stringify({\n          username: this.state.controls.email.value,\n          password: this.state.controls.password.value\n        })\n      }).then(response => {\n        if (response.data === 'No data found') {\n          console.log(response.data);\n          this.setState({\n            error: true\n          });\n        } else {\n          this.setState({\n            submit: true,\n            error: false\n          });\n          this.props.onAuthenticated(true);\n        }\n      });\n    };\n\n    const signUpHandler = event => {\n      event.preventDefault();\n      Axios({\n        method: 'post',\n        url: 'https://radiant-chamber-59801.herokuapp.com/api/userdb/signUp',\n        data: qs.stringify({\n          username: this.state.controls.email.value,\n          password: this.state.controls.password.value\n        })\n      }).then(response => {\n        if (response.data === 'Already Exists') {\n          console.log(response);\n          this.setState({\n            error: true\n          });\n        } else {\n          submitHandler();\n          this.setState({\n            submit: true,\n            error: false\n          });\n          this.props.onAuthenticated(true);\n        }\n\n        console.log(response);\n      });\n    };\n\n    let button = /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: e => signInHandler(e),\n      children: \"SIGN IN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 26\n    }, this);\n\n    if (this.state.isSignup) {\n      button = /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: e => signUpHandler(e),\n        children: \"SIGN UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 26\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Auth\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Welcome to our quiz App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Register yourself or Sign in to proceed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this), this.state.submit ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 42\n      }, this) : null, this.state.error && !this.state.isSignup ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Incorrect Credentials, try Again or Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 64\n      }, this) : null, this.state.error && this.state.isSignup ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Username already exists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 63\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [form, button, /*#__PURE__*/_jsxDEV(Button, {\n          variant: this.state.isSignup ? \"contained\" : \"outlined\",\n          color: \"secondary\",\n          onClick: this.switchAuthModeHandler,\n          style: {\n            margin: '2%'\n          },\n          children: [\"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.isAuthenticated\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, password, signUp) => dispatch(actions.onAuth(username, password, signUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.onSetAuthRedirectPath('/')),\n    onAuthenticated: () => dispatch(actions.onAuthenticated(true))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:/Users/palak/OneDrive/Desktop/FYProject/virtualcaretaker/src/Login.js"],"names":["React","Component","connect","Redirect","Input","Button","actions","Axios","updateObject","checkValidity","qs","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","submit","error","inputChangedHandler","event","controlName","updatedControls","target","setState","switchAuthModeHandler","prevState","componentDidMount","props","buildingBurger","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","form","map","formElement","loading","isAuthenticated","submitHandler","onAuth","signInHandler","preventDefault","method","url","data","stringify","username","then","response","console","log","onAuthenticated","signUpHandler","button","e","margin","mapStateToProps","mapDispatchToProps","dispatch","signUp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB,C,CACA;;AACA,OAAO,YAAP;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,kBAA5C;AACA,OAAOC,EAAP,MAAe,IAAf;;;AAEA,MAAMC,IAAN,SAAmBV,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBW,KADyB,GACjB;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,KAAK,EAAE;AACHC,UAAAA,WAAW,EAAE,OADV;AAEHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFZ;AAMHC,UAAAA,KAAK,EAAE,EANJ;AAOHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERC,YAAAA,OAAO,EAAE;AAFD,WAPT;AAWHC,UAAAA,KAAK,EAAE,KAXJ;AAYHC,UAAAA,OAAO,EAAE;AAZN,SADD;AAeNC,QAAAA,QAAQ,EAAE;AACNV,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,UADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFT;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERK,YAAAA,SAAS,EAAE;AAFH,WAPN;AAWNH,UAAAA,KAAK,EAAE,KAXD;AAYNC,UAAAA,OAAO,EAAE;AAZH;AAfJ,OADN;AA+BJG,MAAAA,QAAQ,EAAE,IA/BN;AAgCJC,MAAAA,MAAM,EAAE,KAhCJ;AAiCJC,MAAAA,KAAK,EAAE;AAjCH,KADiB;;AAAA,SA4CzBC,mBA5CyB,GA4CH,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAC1C;AACA;AACA,YAAMC,eAAe,GAAGzB,YAAY,CAAC,KAAKI,KAAL,CAAWC,QAAZ,EAAsB;AACtD,SAACmB,WAAD,GAAexB,YAAY,CAAC,KAAKI,KAAL,CAAWC,QAAX,CAAoBmB,WAApB,CAAD,EAAmC;AAC1Db,UAAAA,KAAK,EAAEY,KAAK,CAACG,MAAN,CAAaf,KADsC;AAE1DI,UAAAA,KAAK,EAAEd,aAAa,CAACsB,KAAK,CAACG,MAAN,CAAaf,KAAd,EAAqB,KAAKP,KAAL,CAAWC,QAAX,CAAoBmB,WAApB,EAAiCZ,UAAtD,CAFsC;AAG1DI,UAAAA,OAAO,EAAE;AAHiD,SAAnC;AAD2B,OAAtB,CAApC;AAOA,WAAKW,QAAL,CAAc;AAAEtB,QAAAA,QAAQ,EAAEoB;AAAZ,OAAd;AACH,KAvDwB;;AAAA,SAyDzBG,qBAzDyB,GAyDD,MAAM;AAC1B,WAAKD,QAAL,CAAcE,SAAS,IAAI;AACvB,eAAO;AAAEV,UAAAA,QAAQ,EAAE,CAACU,SAAS,CAACV;AAAvB,SAAP;AACH,OAFD;AAGH,KA7DwB;AAAA;;AAqCzBW,EAAAA,iBAAiB,GAAG;AAChB;AACA,QAAI,CAAC,KAAKC,KAAL,CAAWC,cAAZ,IAA8B,KAAKD,KAAL,CAAWE,gBAAX,KAAgC,GAAlE,EAAuE;AACnE,WAAKF,KAAL,CAAWG,qBAAX;AACH;AACJ;;AAqBDC,EAAAA,MAAM,GAAG;AACD,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAKjC,KAAL,CAAWC,QAA3B,EAAqC;AACjC+B,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,QAAAA,EAAE,EAAEF,GADe;AAEnBG,QAAAA,MAAM,EAAE,KAAKpC,KAAL,CAAWC,QAAX,CAAoBgC,GAApB;AAFW,OAAvB;AAIH;;AAED,QAAII,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAsBC,WAAW,iBACxC,QAAC,KAAD;AAEI,MAAA,WAAW,EAAEA,WAAW,CAACH,MAAZ,CAAmBjC,WAFpC;AAGI,MAAA,aAAa,EAAEoC,WAAW,CAACH,MAAZ,CAAmBhC,aAHtC;AAII,MAAA,KAAK,EAAEmC,WAAW,CAACH,MAAZ,CAAmB7B,KAJ9B;AAKI,MAAA,OAAO,EAAE,CAACgC,WAAW,CAACH,MAAZ,CAAmBzB,KALjC;AAMI,MAAA,cAAc,EAAE4B,WAAW,CAACH,MAAZ,CAAmB5B,UANvC;AAOI,MAAA,OAAO,EAAE+B,WAAW,CAACH,MAAZ,CAAmBxB,OAPhC;AAQI,MAAA,OAAO,EAAGO,KAAD,IAAW,KAAKD,mBAAL,CAAyBC,KAAzB,EAAgCoB,WAAW,CAACJ,EAA5C;AARxB,OACSI,WAAW,CAACJ,EADrB;AAAA;AAAA;AAAA;AAAA,YADO,CAAX;;AAaA,QAAI,KAAKR,KAAL,CAAWa,OAAf,EAAwB,CACpB;AACH;;AAID,QAAI,KAAKb,KAAL,CAAWc,eAAf,EAAgC,CAC5B;AACH;;AAED,UAAMC,aAAa,GAAG,MAAM;AACxB,WAAKf,KAAL,CAAWgB,MAAX,CAAkB,KAAK3C,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BK,KAA5C,EAAmD,KAAKP,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BN,KAAhF,EAAuF,KAAKP,KAAL,CAAWe,QAAlG;AACH,KAFD;;AAMA,UAAM6B,aAAa,GAAIzB,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAAC0B,cAAN;AACAH,MAAAA,aAAa;AACb/C,MAAAA,KAAK,CAAC;AACFmD,QAAAA,MAAM,EAAE,MADN;AACcC,QAAAA,GAAG,EAAE,+DADnB;AACoFC,QAAAA,IAAI,EAAElD,EAAE,CAACmD,SAAH,CAAa;AACrGC,UAAAA,QAAQ,EAAE,KAAKlD,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BK,KADiE;AAErGM,UAAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BN;AAF8D,SAAb;AAD1F,OAAD,CAAL,CAKG4C,IALH,CAKQC,QAAQ,IAAI;AAChB,YAAIA,QAAQ,CAACJ,IAAT,KAAkB,eAAtB,EAAuC;AACnCK,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACJ,IAArB;AACA,eAAKzB,QAAL,CAAc;AAAEN,YAAAA,KAAK,EAAE;AAAT,WAAd;AAEH,SAJD,MAKK;AACD,eAAKM,QAAL,CAAc;AAAEP,YAAAA,MAAM,EAAE,IAAV;AAAeC,YAAAA,KAAK,EAAC;AAArB,WAAd;AACA,eAAKU,KAAL,CAAW4B,eAAX,CAA2B,IAA3B;AAEH;AACJ,OAhBD;AAiBH,KApBD;;AAsBA,UAAMC,aAAa,GAAIrC,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAAC0B,cAAN;AAGAlD,MAAAA,KAAK,CAAC;AACFmD,QAAAA,MAAM,EAAE,MADN;AACcC,QAAAA,GAAG,EAAE,+DADnB;AACoFC,QAAAA,IAAI,EAAElD,EAAE,CAACmD,SAAH,CAAa;AACrGC,UAAAA,QAAQ,EAAE,KAAKlD,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BK,KADiE;AAErGM,UAAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BN;AAF8D,SAAb;AAD1F,OAAD,CAAL,CAKG4C,IALH,CAKQC,QAAQ,IAAI;AAEhB,YAAGA,QAAQ,CAACJ,IAAT,KAAgB,gBAAnB,EAAoC;AAChCK,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,eAAK7B,QAAL,CAAc;AAACN,YAAAA,KAAK,EAAC;AAAP,WAAd;AACH,SAHD,MAII;AACAyB,UAAAA,aAAa;AACb,eAAKnB,QAAL,CAAc;AAACP,YAAAA,MAAM,EAAC,IAAR;AAAaC,YAAAA,KAAK,EAAC;AAAnB,WAAd;AACA,eAAKU,KAAL,CAAW4B,eAAX,CAA2B,IAA3B;AACH;;AACDF,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,OAjBD;AAmBH,KAvBD;;AAyBA,QAAIK,MAAM,gBAAG,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAC,WAAhC;AAA4C,MAAA,OAAO,EAAGC,CAAD,IAAOd,aAAa,CAACc,CAAD,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAb;;AAEA,QAAI,KAAK1D,KAAL,CAAWe,QAAf,EAAyB;AACrB0C,MAAAA,MAAM,gBAAG,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,OAAO,EAAC,WAAhC;AAA4C,QAAA,OAAO,EAAGC,CAAD,IAAOF,aAAa,CAACE,CAAD,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAT;AACH;;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGK,KAAK1D,KAAL,CAAWgB,MAAX,gBAAoB,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAApB,GAA8C,IAHnD,EAIK,KAAKhB,KAAL,CAAWiB,KAAX,IAAoB,CAAC,KAAKjB,KAAL,CAAWe,QAAhC,gBAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA1C,GAA+F,IAJpG,EAKK,KAAKf,KAAL,CAAWiB,KAAX,IAAoB,KAAKjB,KAAL,CAAWe,QAA/B,gBAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAzC,GAA0E,IAL/E,eAQI;AAAA,mBACKsB,IADL,EAEKoB,MAFL,eAGI,QAAC,MAAD;AACI,UAAA,OAAO,EAAE,KAAKzD,KAAL,CAAWe,QAAX,GAAsB,WAAtB,GAAoC,UADjD;AAEI,UAAA,KAAK,EAAC,WAFV;AAGI,UAAA,OAAO,EAAE,KAAKS,qBAHlB;AAII,UAAA,KAAK,EAAE;AAAEmC,YAAAA,MAAM,EAAE;AAAV,WAJX;AAAA,mCAIwC,KAAK3D,KAAL,CAAWe,QAAX,GAAsB,QAAtB,GAAiC,QAJzE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAoBH;;AA7KoB;;AAiL7B,MAAM6C,eAAe,GAAG5D,KAAK,IAAI;AAC7B,SAAO;AACHyC,IAAAA,eAAe,EAAEzC,KAAK,CAACyC;AADpB,GAAP;AAGH,CAJD;;AAMA,MAAMoB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHnB,IAAAA,MAAM,EAAE,CAACO,QAAD,EAAWrC,QAAX,EAAqBkD,MAArB,KAAgCD,QAAQ,CAACpE,OAAO,CAACiD,MAAR,CAAeO,QAAf,EAAyBrC,QAAzB,EAAmCkD,MAAnC,CAAD,CAD7C;AAEHjC,IAAAA,qBAAqB,EAAE,MAAMgC,QAAQ,CAACpE,OAAO,CAACoC,qBAAR,CAA8B,GAA9B,CAAD,CAFlC;AAGHyB,IAAAA,eAAe,EAAE,MAAMO,QAAQ,CAACpE,OAAO,CAAC6D,eAAR,CAAwB,IAAxB,CAAD;AAH5B,GAAP;AAKH,CAND;;AAQA,eAAejE,OAAO,CAACsE,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C9D,IAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from './Input';\r\n// import Button from '../../components/UI/Button/Button';\r\nimport { Button } from '@material-ui/core';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\nimport './Auth.css';\r\nimport * as actions from '../store/index';\r\nimport Axios from 'axios'\r\n\r\nimport { updateObject, checkValidity } from '../store/utility';\r\nimport qs from 'qs';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true,\r\n        submit: false,\r\n        error: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log(classes.Auth);\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        // console.log(event.target.value)\r\n        // console.log(controlName)\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return { isSignup: !prevState.isSignup };\r\n        });\r\n    }\r\n\r\n    render() {\r\n            const formElementsArray = [];\r\n            for (let key in this.state.controls) {\r\n                formElementsArray.push({\r\n                    id: key,\r\n                    config: this.state.controls[key]\r\n                });\r\n            }\r\n\r\n            let form = formElementsArray.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n            )\r\n            );\r\n\r\n            if (this.props.loading) {\r\n                // form = <Spinner />\r\n            }\r\n\r\n\r\n\r\n            if (this.props.isAuthenticated) {\r\n                // authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n            }\r\n\r\n            const submitHandler = () => {\r\n                this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n            }\r\n\r\n\r\n           \r\n            const signInHandler = (event) => {\r\n                event.preventDefault();\r\n                submitHandler();\r\n                Axios({\r\n                    method: 'post', url: 'https://radiant-chamber-59801.herokuapp.com/api/userdb/signin', data: qs.stringify({\r\n                        username: this.state.controls.email.value,\r\n                        password: this.state.controls.password.value\r\n                    })\r\n                }).then(response => {\r\n                    if (response.data === 'No data found') {\r\n                        console.log(response.data)\r\n                        this.setState({ error: true })\r\n\r\n                    }\r\n                    else {\r\n                        this.setState({ submit: true,error:false })\r\n                        this.props.onAuthenticated(true)\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n            const signUpHandler = (event) => {\r\n                event.preventDefault();\r\n                \r\n                \r\n                Axios({\r\n                    method: 'post', url: 'https://radiant-chamber-59801.herokuapp.com/api/userdb/signUp', data: qs.stringify({\r\n                        username: this.state.controls.email.value,\r\n                        password: this.state.controls.password.value\r\n                    })\r\n                }).then(response => {\r\n                    \r\n                    if(response.data==='Already Exists'){\r\n                        console.log(response)\r\n                        this.setState({error:true})\r\n                    }\r\n                    else{\r\n                        submitHandler();\r\n                        this.setState({submit:true,error:false})\r\n                        this.props.onAuthenticated(true)\r\n                    }\r\n                    console.log(response)\r\n                }\r\n                )\r\n            }\r\n\r\n            let button = <Button color=\"primary\" variant=\"contained\" onClick={(e) => signInHandler(e)}>SIGN IN</Button>\r\n\r\n            if (this.state.isSignup) {\r\n                button = <Button color=\"primary\" variant=\"contained\" onClick={(e) => signUpHandler(e)}>SIGN UP</Button>\r\n            }\r\n            return (\r\n                <div className=\"Auth\">\r\n                    <h3>Welcome to our quiz App</h3>\r\n                    <h5>Register yourself or Sign in to proceed!</h5>\r\n                    {this.state.submit ? <Redirect to=\"/quiz\" /> : null}\r\n                    {this.state.error && !this.state.isSignup ?<p>Incorrect Credentials, try Again or Sign Up</p> : null}\r\n                    {this.state.error && this.state.isSignup ?<p>Username already exists</p> : null}\r\n\r\n\r\n                    <form>\r\n                        {form}\r\n                        {button}\r\n                        <Button\r\n                            variant={this.state.isSignup ? \"contained\" : \"outlined\"}\r\n                            color=\"secondary\"\r\n                            onClick={this.switchAuthModeHandler}\r\n                            style={{ margin: '2%' }}>SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.isAuthenticated,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (username, password, signUp) => dispatch(actions.onAuth(username, password, signUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.onSetAuthRedirectPath('/')),\r\n        onAuthenticated: () => dispatch(actions.onAuthenticated(true))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}